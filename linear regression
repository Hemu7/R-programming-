# import data 

data<-read.csv("C:/Users/heman/OneDrive/Documents/Ecommerce Customers")


str(data)

summary(data)


#  create plots and search for insights 

library(ggplot2)

#correlation between time on website and yearly amount spent?
ggplot(data, aes(x=Time.on.Website, y=Yearly.Amount.Spent))+
  geom_point(color="orange")+
  ggtitle("time on website against yearly amount spent")+
  xlab("time on website")+
  ylab("yearly amount spent")

#avg session length vs yearly amount spent 
ggplot(data, aes(x=Avg..Session.Length, y=Yearly.Amount.Spent))+
  geom_point(color="orange")+
  ggtitle("avg session length against yearly amount spent")+
  xlab("avg session length")+
  ylab("yearly amount spent")


## pairplots of allcontinous 

pairs(data[c("Avg..Session.Length",
             "Time.on.App",
             "Time.on.Website",
             "Length.of.Membership",
             "Yearly.Amount.Spent")],
      col="orange",
      pch=16,
      main="pairplot for all continous variable"
      )


#explore the selected variables 

hist(data$Length.of.Membership)
ggplot(data,aes(x=Length.of.Membership))+
  geom_histogram(
    color="white",
    fill="orange",
    binwidth = 0.5
  )

boxplot(data$Length.of.Membership)
ggplot(data, aes(x=Length.of.Membership))+
  geom_boxplot(fill="orange")


#fit linear regression model 

attach(data)
lm.fit1 <-lm(Yearly.Amount.Spent~Length.of.Membership)

summary(lm.fit1)

plot(Yearly.Amount.Spent~Length.of.Membership)
abline(lm.fit1, col="red")


#check residuals analysis

hist(residuals(lm.fit1))

qqnorm(residuals(lm.fit1))
qqline(residuals(lm.fit1), col="red")

# evaluate the model 
set.seed(1)
row.number <- sample(1:nrow(data),0.8*nrow(data))


train <- data[row.number, ]
test<-data[-row.number,]

# estimate the linear fit with the training set
lm.fit0.8 <- lm(Yearly.Amount.Spent~Length.of.Membership, data=train)
summary(lm.fit0.8)


#predict in the test dataset
prediction0.8<- predict(lm.fit0.8, newdata =test)


error.0.8<-prediction0.8 - test$Yearly.Amount.Spent
#root mean square error
rmse<- sqrt(mean(error.0.8^2))

#mean absolute percentage error
mape<- mean(abs(error.0.8/test$Yearly.Amount.Spent))

c(rmse= rmse, mape=mape, R2=summary(lm.fit0.8)$r.squared)
summary(lm.fit0.8)

#multiregression model

attach(data)
lm.fit<-lm(Yearly.Amount.Spent~Avg..Session.Length+Time.on.Website+Time.on.App+Length.of.Membership)
summary(lm.fit)
 
#evalute the model
set.seed(1)
row.number <- sample(1:nrow(data),0.8*nrow(data))


train <- data[row.number, ]
test<-data[-row.number,]

# estimate the multilinear fit with the training set
lm.fit0.8<-lm(Yearly.Amount.Spent~Avg..Session.Length+Time.on.Website+Time.on.App+Length.of.Membership)

summary(lm.fit0.8)


#predict in the test dataset
prediction0.8<- predict(lm.fit0.8, newdata =test)


error.0.8<-prediction0.8 - test$Yearly.Amount.Spent
#root mean square error
rmse<- sqrt(mean(error.0.8^2))

#mean absolute percentage error
mape<- mean(abs(error.0.8/test$Yearly.Amount.Spent))

c(rmse= rmse, mape=mape, R2=summary(lm.fit0.8)$r.squared)
summary(lm.fit0.8)
